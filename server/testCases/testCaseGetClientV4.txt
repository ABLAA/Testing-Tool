    let testTimeoutId;
    let client ;
    let clientId;
    try {
        testTimeoutId = setTimeout(function () {
            logger.log("testTimeout()");
            test.ok(false);
            test.done();
        }, 10000);

     
        // Setup HTTP request
        sdk.utils.logTitle('Get client V4');
        client = await api.getClientV4('OFR', client.getId());
            try {
                // Test result
                clearTimeout(testTimeoutId);
                let expectedExtentedOrangeProfile ={
                    "is_trusted": false
                  }
                test.deepEqual(client.getAuthorizedUserInfoClaims(), undefined);    //non présent car la non comptabilité en V4
                test.deepEqual(client.getExtendedOrangeProfile(), expectedExtentedOrangeProfile, "extended_orange_profile should be undefined");  //non présent car la non comptabilité en V4
                test.strictEqual(client.getIdTtokenSignedResponseAlg(), undefined); //non présent car la non comptabilité en V4
                test.strictEqual(client.getApplicationType(), undefined);  //non présent car la non comptabilité en V4
                test.deepEqual(client.getScope(), undefined, "expected_Scope");  //non présent car la non comptabilité en V4
                test.strictEqual(client.getUri(), "");
                test.strictEqual(client.getLogoUri(), "");
                test.strictEqual(client.getPolicyUri(), "");
                test.strictEqual(client.getTosUri(), "");
                test.done();
            } catch (exception) {
                logger.log("catched exception: " + exception);
                if (testTimeoutId) {
                    clearTimeout(testTimeoutId);
                }
                test.ok(false);
                test.done();
            }
        
    } catch (exception) {
        logger.log("catched exception: " + exception);
        if (testTimeoutId) {
            clearTimeout(testTimeoutId);
        }
        test.ok(false);
        test.done();
    }
};